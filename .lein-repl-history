(client/get "http://www.example.com/")
(client/get url options)
(:body (client/get url options))
(parse-string (:body (client/get url options)))
(get-posts)
(count (only-good-posts get-posts))
(count (only-good-posts (get-posts)))
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post?
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-posts? posts))
)
(only-good-posts (get-posts))
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post? posts))
)
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post posts))
)
(count (only-good-posts (get-posts)))
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post posts))
)
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post?
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post? posts))
)
(count (only-good-posts (get-posts)))
(reduce + 0 [1 2 3 4 5])
(conj [1 2 3] 1)
(conj [1 2 3] [1 2])
(conj [1 2 3])
(conj #{} [:a :b :c])
(conj #{} :a)
(conj [] "a")
(conj [] "b")
(count "abc")
(is-seq? [])
(seq? [])
(seq? [1])
(seq? '(1))
(seq? "a")
(reduce conj [] "Rich Hickey")
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post?
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post? posts))
(defn average-score
  [posts]
  (let [post-count (count posts)
        total-score (reduce + (map :score posts))]
    (/ total-score post-count)))
)
(average-score (get-posts))
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post?
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post? posts))
(defn average-score
  [posts]
  (let [post-count (count posts)
        total-score (reduce + (map :score posts))]
    (float (/ total-score post-count))))
)
(average-score (get-posts))
(update {:a 1 :b 2 :c 3} :b inc)
(update {:a 1 :b 2 :c 3} :b +)
(update {:a 1 :b 2 :c 3} :b (+ 5))
(update {:a 1 :b 2 :c 3} :b 1)
(update {:a 1 :b 2 :c 3} :b inc)
(defn post-count-helper  [acc x]
                        (update acc x (fnil inc 0)))
(post-count-helper {} "batman")
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post?
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post? posts))
(defn average-score
  [posts]
  (let [post-count (count posts)
        total-score (reduce + (map :score posts))]
    (float (/ total-score post-count))))
(defn post-count-helper
  [acc x]
  (update acc x (fnil inc 0)))
(defn author-post-count
  [posts]
  (let [authors (map :author posts)]
    (reduce post-count-helper {} authors)))
)
(author-post-count (get-posts))
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post?
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post? posts))
(defn average-score
  [posts]
  (let [post-count (count posts)
        total-score (reduce + (map :score posts))]
    (float (/ total-score post-count))))
(defn post-count-helper
  [acc x]
  (update acc x (fnil inc 0)))
(defn author-post-count
  [posts]
  (let [authors (map :author posts)]
    (reduce post-count-helper {} authors)))
(defn total-score-helper
  [acc x]
  (update acc (:author x) (fnil (partial + (:score x)) 0)))
(defn author-total-score
  [posts]
  (reduce total-score-helper {} posts))
)
(author-total-score (get-posts))
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post?
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post? posts))
(defn average-score
  [posts]
  (let [post-count (count posts)
        total-score (reduce + (map :score posts))]
    (float (/ total-score post-count))))
(defn post-count-helper
  [acc x]
  (update acc x (fnil inc 0)))
(defn author-post-count
  [posts]
  (let [authors (map :author posts)]
    (reduce post-count-helper {} authors)))
(defn total-score-helper
  [acc x]
  (update acc (:author x) (fnil (partial + (:score x)) 0)))
(defn author-total-score
  [posts]
  (reduce total-score-helper {} posts))
(defn links-posted-helper
  [acc x]
  (if (empty? (:selftext x))
    (conj acc (:url x))
    acc))
(defn links-posted
  [posts]
  (reduce links-posted-helper {} posts))
)
(links-posted (get-posts))
(do
(ns reddit-analyser.core
  (:require [clj-http.client :as client] 
            [cheshire.core :refer [parse-string]])  
  (:gen-class))
(def options {:headers {"User-agent" "bond-007"}
              :query-params {:limit 100}})
(def url "https://www.reddit.com/r/Clojure.json")
(parse-string (:body (client/get url options)) true)
(defn get-posts
  []
  (let [body (:body (client/get url options))
        parsed-body (parse-string body true)
        children (:children (:data parsed-body))]
    (map :data children)))
(defn good-post?
  [post]
  (> (:score post) 15))
(defn only-good-posts
  [posts]
  (filter good-post? posts))
(defn average-score
  [posts]
  (let [post-count (count posts)
        total-score (reduce + (map :score posts))]
    (float (/ total-score post-count))))
(defn post-count-helper
  [acc x]
  (update acc x (fnil inc 0)))
(defn author-post-count
  [posts]
  (let [authors (map :author posts)]
    (reduce post-count-helper {} authors)))
(defn total-score-helper
  [acc x]
  (update acc (:author x) (fnil (partial + (:score x)) 0)))
(defn author-total-score
  [posts]
  (reduce total-score-helper {} posts))
(defn links-posted-helper
  [acc x]
  (if (empty? (:selftext x))
    (conj acc (:url x))
    acc))
(defn links-posted
  [posts]
  (reduce links-posted-helper [] posts))
)
(links-posted (get-posts))
(fn [x] (+ x 10))
(def add-10 (fn [x] (+ x 10)))
add-10
(add-10)
(add-10 1)
(take ["a"])
(#(+ %1 %2) 10 15)
((fn [x y] (+ x y)) 10 15)
((defn sum [x y] (+ x y)) 10 15)
(do     (println "LOG: Computing...")
                        (+ 1 1))
((println "LOG: Computing...")
                        (+ 1 1))
(defn hello [] (println "LOG: Computing...")
                        (+ 1 1))
(hello)
